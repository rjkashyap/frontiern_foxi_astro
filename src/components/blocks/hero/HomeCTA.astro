---
// Home page CTA Section
// ------------
// Description: A centered call to action section that contains: a title, text, a user review snippet, a button and an image.

// Components
// - Layout
import Section from '../../ui/Section.astro'
import Row from '../../ui/Row.astro'
import Col from '../../ui/Col.astro'
// - UI
import ChipNotification from '../../ui/ChipNotification.astro'
import Button from '../../ui/Button.astro'
import AvatarGroup from '../../ui/AvatarGroup.astro'

// Content
// - Hero Image
import heroImage from '../../../assets/heroimagefn.png'
// - Avatars
import user1 from '../../../assets/avatars/avatar-01.webp'
import user2 from '../../../assets/avatars/avatar-02.webp'
import user3 from '../../../assets/avatars/avatar-03.webp'

// Props
export interface Props {
  heroUrl?: string
  heroAlt?: string
}

const { heroUrl = undefined, heroAlt = 'Frontier Nations' } = Astro.props

const avatars = [
  { image: { src: user1.src, alt: 'user name' }, link: '/' },
  { image: { src: user2.src, alt: 'user name' }, link: '/' },
  { image: { src: user3.src, alt: 'user name' }, link: '/' }
]
---

<Section id="intro" padding="top" classes="bg-neutral-50 dark:bg-neutral-900">
  <Row>
    <Col span="2" />
    <Col span="8" align="center">
      <!--
      <ChipNotification radius="rounded-full" classes="mb-6">
        <strong>30K+</strong> satisfied customers
        <AvatarGroup avatars={avatars} radius="rounded-full" slot="button" />
      </ChipNotification>
      -->
      <h1>
        Frontier Nations - Multiplying disciples until there is <strong>#NoPlaceLeft</strong> 
      </h1>

      <p class="pb-0 text-lg">
        Be part of a mission that starts where you are and reaches where Christ is not yet known
      </p>
      <Button size="lg" link="/">Explore Opportunities</Button>
    </Col>
    <Col span="2" />
    <Col span="2" />
    <Col span="8">
      <img
        id="hero-image"
        src={heroUrl ?? heroImage.src}
        alt={heroAlt}
        class="w-full h-auto max-h-[70vh] object-contain bg-transparent mix-blend-normal shadow-none"
        loading="eager"
        fetchpriority="high"
        decoding="async"
      />
    </Col>
    <Col span="2" />
  </Row>
</Section>

<script is:inline>
  const BASEROW_VIEW =
    'https://api.baserow.io/api/database/views/grid/2Rygf6nl75LDEqc2FtBZ-L4W3uUpreJ3BtiMSVjRtro/public/rows/?user_field_names=true';

  async function updateHeroImage() {
    try {
      const res = await fetch(BASEROW_VIEW, { cache: 'no-store' });
      if (!res.ok) return;
      const data = await res.json();
      const rows = Array.isArray(data?.results) ? data.results : [];

      // field_5880894 = Key, field_5881992 = HeroImage, field_5881993 = HeroAlt, field_5881994 = Published
      const heroRow =
        rows.find(r => r?.field_5880894 === 'hero' && r?.field_5881994 === true) ||
        rows[0] ||
        null;

      if (!heroRow) return;

      const img = heroRow?.field_5881992?.[0];

      // ⚠️ Use ONLY the original file URL to preserve transparency (thumbnails may be flattened).
      const src = img?.url || null;
      const alt = heroRow?.field_5881993 || 'Hero';

      const el = document.getElementById('hero-image');
      if (el && src) {
        el.src = src;
        el.alt = alt;
        // ensure no accidental tint from CSS
        el.style.backgroundColor = 'transparent';
        el.style.mixBlendMode = 'normal';
        el.style.boxShadow = 'none';
      }
    } catch (e) {
      console.error('Client fetch failed:', e);
    }
  }

  // Run on load
  updateHeroImage();
</script>