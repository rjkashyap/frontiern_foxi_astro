---
// Feature Cards Grid Section
// Whole card opens signup modal (no /features navigation)

// Layout
import Section from '../../ui/Section.astro'
import Row from '../../ui/Row.astro'
import Col from '../../ui/Col.astro'
// UI
import Card from '../../ui/cards/FeatureCard.astro'

// Images
import feature01 from '../../../assets/cards/feature-01.svg'
import feature02 from '../../../assets/cards/feature-02.svg'
import feature03 from '../../../assets/cards/feature-03.svg'
import feature04 from '../../../assets/cards/feature-04.svg'
import feature05 from '../../../assets/cards/feature-05.svg'

// Catalog
const items = [
  { title: 'All your data in one place',
    subtitle: 'Stay on top of your tasks and deadlines with our intuitive project management tool.',
    image: feature01, cat: 'staff-role' },
  { title: 'Organize & manage your projects',
    subtitle: 'Plan, assign, and track with clarity across teams and timelines.',
    image: feature02, cat: 'mission-internship' },
  { title: 'Keep your team connected',
    subtitle: 'Integrated chat to share updates, files, and messages securely.',
    image: feature03, cat: 'church-planting-residency' },
  { title: 'Manage your customers',
    subtitle: 'Build and nurture relationships with a powerful, simple CRM.',
    image: feature04, cat: 'short-term-trip' },
  { title: 'Simplify your financial operations',
    subtitle: 'Create, send, and track invoices effortlessly.',
    image: feature05, cat: 'medium-term-placement' },
  { title: 'Insights that drive action',
    subtitle: 'Dashboards and reports that surface what matters.',
    image: feature01, cat: 'long-term-placement' }
]

// Filters
const filters = [
  { slug: 'all', label: 'All' },
  { slug: 'staff-role', label: 'Staff Role' },
  { slug: 'mission-internship', label: 'Mission Internship' },
  { slug: 'church-planting-residency', label: 'Church Planting Residency' },
  { slug: 'short-term-trip', label: 'Short-term Trip' },
  { slug: 'medium-term-placement', label: 'Medium-term Placement' },
  { slug: 'long-term-placement', label: 'Long-term Placement' }
]
---

<Section id="features">
  <!-- Heading -->
  <Row>
    <Col span="12" align="center" classes="mb-8 max-w-4xl mx-auto">
      <h2 class="text-pretty">Innovative tools to <strong>transform</strong> your workflow</h2>
      <p class="pb-0 text-lg">
        Explore the suite of tools designed to streamline your workflow, enhance productivity, and
        drive growth. Each product is crafted with precision to meet your needs and exceed your
        expectations.
      </p>
    </Col>
  </Row>

  <!-- Filter Bar -->
  <Row>
    <Col span="12" align="center">
      <div
        id="feature-filters"
        class="inline-flex flex-wrap items-center justify-center gap-2 rounded border px-2 py-2
               bg-neutral-900/60 border-neutral-800
               dark:bg-neutral-900/60 dark:border-neutral-800">
        {filters.map((f, i) => (
          <button
            type="button"
            data-filter={f.slug}
            class:list={[
              'px-3 py-1.5 text-sm rounded border transition',
              'border-neutral-700 text-neutral-300 hover:bg-neutral-800 hover:border-neutral-600',
              i === 0 ? 'is-active bg-neutral-800 border-primary-500 text-neutral-100' : ''
            ]}>
            {f.label}
          </button>
        ))}
      </div>
    </Col>
  </Row>

  <!-- Grid -->
  <div
    id="feature-grid"
    class="mt-8 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3"
  >
    {items.map((it) => (
      <div
        class="card-wrap flex h-[380px] sm:h-[340px] lg:h-[360px] w-full cursor-pointer"
        data-cat={it.cat}
      >
        <Card
          title={it.title}
          subtitle={it.subtitle}
          image={it.image}
          data-modal="signup"
        />
      </div>
    ))}
  </div>
</Section>

<style>
  #feature-filters .is-active {
    box-shadow: 0 0 0 1px theme('colors.primary.500 / 0.6');
  }

  #feature-grid .card-wrap {
    will-change: transform, opacity;
  }
</style>

<script>
  import gsap from "gsap";

  document.addEventListener("astro:page-load", () => {
    const bar = document.getElementById("feature-filters");
    const grid = document.getElementById("feature-grid");
    if (!bar || !grid) return;

    const DURATION = 0.35;
    const EASE = "power2.out";

    const btns = Array.from(bar.querySelectorAll("[data-filter]"));
    const wraps = () => Array.from(grid.querySelectorAll(".card-wrap"));

    // Ensure modal opens when clicking anywhere on card
    wraps().forEach((wrap) => {
      wrap.addEventListener("click", (e) => {
        const modalTarget = wrap.querySelector("[data-modal='signup']");
        if (modalTarget) modalTarget.click();
      });
    });

    const nextFrame = () =>
      new Promise((resolve) => requestAnimationFrame(() => resolve()));

    function measureVisiblePositions() {
      const map = new Map();
      wraps().forEach((w) => {
        if (!w.classList.contains("hidden")) {
          const r = w.getBoundingClientRect();
          map.set(w, { x: r.left, y: r.top });
        }
      });
      return map;
    }

    function setActive(btn) {
      btns.forEach((b) =>
        b.classList.remove(
          "is-active",
          "bg-neutral-800",
          "border-primary-500",
          "text-neutral-100"
        )
      );
      btn.classList.add(
        "is-active",
        "bg-neutral-800",
        "border-primary-500",
        "text-neutral-100"
      );
    }

    async function applyFilter(slug) {
      const before = measureVisiblePositions();

      // Unhide new items
      wraps().forEach((w) => {
        const cat = w.getAttribute("data-cat");
        const show = slug === "all" || cat === slug;

        if (show && w.classList.contains("hidden")) {
          w.classList.remove("hidden");
          gsap.set(w, { opacity: 0, scale: 0.95 });
        }
      });

      await nextFrame();

      // Animate out hidden ones
      wraps().forEach((w) => {
        const cat = w.getAttribute("data-cat");
        const show = slug === "all" || cat === slug;

        if (!show && !w.classList.contains("hidden")) {
          gsap.to(w, {
            opacity: 0,
            scale: 0.92,
            duration: 0.18,
            ease: "power1.out",
            onComplete: () => {
              w.classList.add("hidden");
              gsap.set(w, { clearProps: "opacity,scale" });
            },
          });
        }
      });

      const after = measureVisiblePositions();

      after.forEach((afterPos, el) => {
        const beforePos = before.get(el);
        if (!beforePos) {
          gsap.to(el, { opacity: 1, scale: 1, duration: 0.25, ease: "power1.out" });
          return;
        }

        const dx = beforePos.x - afterPos.x;
        const dy = beforePos.y - afterPos.y;

        if (dx || dy) {
          gsap.fromTo(el, { x: dx, y: dy }, { x: 0, y: 0, duration: DURATION, ease: EASE });
        }
      });
    }

    btns.forEach((btn) => {
      btn.addEventListener("click", (e) => {
        e.preventDefault();
        setActive(btn);
        applyFilter(btn.getAttribute("data-filter") || "all");
      });
    });

    applyFilter("all");
  });
</script>