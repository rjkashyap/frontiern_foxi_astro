---
// Button
// ------------
// Description: Buttons are interactive elements activated by a user with a mouse, keyboard, or tap
// Properties:
// - Type: the type of the button (link, button, submit, reset). If its type is link, the button will be rendered as an anchor tag
// - Size: the size of the button (lg, base, sm)
// - Link: the link of the button (if type is link)
// - Modal: The id of the modal that the button can trigger (optional)
// - Style: the style of the button (primary, secondary, neutral)
// - Variation: the variation of the button (defaultoutline, link)
// - Elevated: whether the button is elevated or not (optional)
// - classes: additional classes
// Reference: https://wind-ui.com/components/buttons/

// Props
type Props = {
	type?: 'link' | 'button' | 'submit' | 'reset'
	size?: 'lg' | 'base' | 'sm'
	link?: string
	modal?: string
	style?: 'primary' | 'secondary' | 'neutral' | 'white'
	variation?: 'outline' | 'link'
	elevated?: boolean
	classes?: string
}
const {
	type = 'button',
	size = 'base',
	link,
	modal,
	style: _style = 'primary',
	variation,
	elevated,
	classes
} = Astro.props

const resolvedVariation = variation === 'link' ? 'link' : variation === 'outline' ? 'outline' : 'solid'

const variantClasses =
	resolvedVariation === 'link'
		? [
				'bg-transparent',
				'px-0',
				'font-normal',
				'underline-offset-4',
				'text-neutral-900',
				'dark:text-white',
				'hover:underline'
			]
		: resolvedVariation === 'outline'
			? [
					'bg-transparent',
					'text-black',
					'dark:text-white',
					'border',
					'border-default',
					'hover-grey'
				]
			: ['btn-grey', 'dark:btn-grey', 'hover-grey', 'border', 'border-default']
---

{
	type === 'link' || link ? (
		<a
			href={link}
			target={link?.startsWith('http') ? '_blank' : '_self'}
			class:list={[
				'button',
				...variantClasses,
				{ ['button--' + `${size}`]: size },
				{ ['button--elevated']: elevated },
				{ [`${classes}`]: classes }
			]}
		>
			<slot />
		</a>
	) : (
		<button
			type={type}
			class:list={[
				'button',
				...variantClasses,
				{ ['button--' + `${size}`]: size },
				{ ['button--elevated']: elevated },
				{ [`${classes}`]: classes }
			]}
			{...(modal ? { 'data-modal': modal } : {})}
		>
			<slot />
		</button>
	)
}
<style>
	.button {
		@apply inline-flex cursor-pointer items-center justify-center gap-2 whitespace-nowrap rounded font-bold tracking-wide transition duration-300 focus-visible:outline-none disabled:cursor-not-allowed disabled:shadow-none;
	}

	.button--lg {
		@apply h-12 px-6 text-sm [&.button--elevated]:shadow-lg [&.button--elevated]:hover:shadow-md [&.button--elevated]:focus:shadow-md;
	}

	.button--base {
		@apply h-10 px-5 text-sm [&.button--elevated]:shadow-md [&.button--elevated]:hover:shadow-sm [&.button--elevated]:focus:shadow-sm;
	}

	.button--sm {
		@apply h-8 px-4 text-xs [&.button--elevated]:shadow-md [&.button--elevated]:hover:shadow-sm [&.button--elevated]:focus:shadow-sm;
	}
</style>
