---
// Modal (full-viewport overlay, square corners, background scroll lock)
import Button from './Button.astro'
import { Icon } from 'astro-icon/components'

type Props = {
  id?: string
  title?: string
  classes?: string
}
const { id, title, classes } = Astro.props
---

<div
  {...(id ? { id } : {})}
  class:list={[
    // Full-screen frosted overlay that only shows when `.open` is present
    'modal fixed inset-0 z-50 hidden items-center justify-center overflow-hidden bg-white/50 lg:backdrop-blur-sm dark:bg-neutral-900/50 [&.open]:flex [&.open]:h-screen',
    { [`${classes}`]: classes },
  ]}
>
  <!-- Safe vertical padding so the card never touches edges -->
  <div class="relative w-full h-full flex items-center justify-center p-4 sm:p-6">
    <!-- Modal card -->
    <div
      class="modal__popup mx-auto w-full max-w-sm sm:max-w-md md:max-w-lg lg:max-w-2xl bg-white dark:bg-neutral-900 border border-neutral-100 dark:border-neutral-800 shadow-xl shadow-neutral-700/10 dark:shadow-neutral-950/40 overflow-hidden rounded-none"
    >
      <div class="modal__header flex items-center justify-between gap-6 border-b border-neutral-100 dark:border-neutral-800 px-6 py-3 text-lg font-medium">
        {title && <h2 class="modal__title mb-0 truncate text-lg text-neutral-900 dark:text-neutral-50">{title}</h2>}
        <Button size="sm" style="neutral" classes="modal__close" variation="link">
          <Icon name="x-mark" class="dark:text-neutral-50" />
          <span class="sr-only">Close</span>
        </Button>
      </div>

      <!-- Content area scrolls if needed; page behind stays locked -->
      <div class="modal__body max-h-[80vh] overflow-y-auto p-6">
        <slot />
      </div>
    </div>
  </div>
</div>

<style>
  /* Keep selectors consistent with the theme */
  .modal__close { @apply !rounded-full !px-2.5; }
</style>

<!-- Lock background scroll while modal is open -->
<script is:inline>
  (() => {
    const modal = (document.getElementById(%id%) || document.currentScript?.closest('.modal'));
    function lock(yes) {
      // lock both <html> and <body> to be safe across browsers
      document.documentElement.style.overflow = yes ? 'hidden' : '';
      document.body.style.overflow = yes ? 'hidden' : '';
      if (yes) document.body.classList.add('modal-open'); else document.body.classList.remove('modal-open');
    }
    function sync() { lock(modal?.classList.contains('open')); }

    if (modal) {
      // Update lock on class changes
      new MutationObserver(sync).observe(modal, { attributes: true, attributeFilter: ['class'] });
      sync();

      // Click overlay to close (keeps existing theme behavior if present)
      modal.addEventListener('click', (e) => { if (e.target === modal) modal.classList.remove('open'); });

      // ESC to close
      window.addEventListener('keydown', (e) => { if (e.key === 'Escape') modal.classList.remove('open'); });
    }
  })();
</script>