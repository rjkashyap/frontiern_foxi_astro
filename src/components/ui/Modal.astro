---
// Modal
// ------------
// Description: the modal component is a ui element that displays a dialog box that appears on top of the current page.
// Properties:
// - Id: the id of the modal (use this id in the "modal" prop of the button)
// - Title: the title of the modal
// - classes: additional classes
// Reference: https://wind-ui.com/components/modals/

// Components
// - UI
import Button from './Button.astro'
import { Icon } from 'astro-icon/components'

// Props
type Props = {
  id?: string
  title?: string
  classes?: string
}
const { id, title, classes } = Astro.props
---

<div {...(id ? { id } : {})} class:list={['modal', { [`${classes}`]: classes }]}>
  <div class="modal__popup">
    <div class="modal__header">
      {title && <h2 class="modal__title">{title}</h2>}
      <Button size="sm" style="neutral" classes="modal__close" variation="link">
        <Icon name="x-mark" class="dark:text-neutral-50" />
        <span class="sr-only">Close</span>
      </Button>
    </div>
    <div class="modal__body">
      <slot />
    </div>
  </div>
</div>

<style>
  /* Overlay: keep Foxi’s original behavior (hidden until .open) */
  .modal {
    @apply fixed left-0 top-0 z-30 flex h-0 w-full items-center justify-center overflow-hidden
           bg-white/50 lg:backdrop-blur-sm dark:bg-neutral-900/50
           [&.open]:h-full;
  }

  /* Popup: width 80vw on phones, 50vw from md+; cap height at 80vh (shrinks if content is shorter) */
  .modal__popup {
    @apply m-6 flex w-[80vw] md:w-[50vw] max-w-full max-h-[80vh]
           translate-y-6 flex-col overflow-hidden rounded border border-neutral-100
           bg-white text-neutral-500 opacity-0 shadow-xl shadow-neutral-700/5
           transition-all duration-500
           dark:border-neutral-800 dark:bg-neutral-900 dark:shadow-neutral-950/50
           [.open_&]:translate-y-0 [.open_&]:opacity-100;
  }

  .modal__header {
    @apply flex items-center justify-between gap-6 border-b border-neutral-100 px-6 py-3 text-lg font-medium dark:border-neutral-800;
  }

  .modal__title {
    @apply mb-0 truncate text-lg text-neutral-900 dark:text-neutral-50;
  }

  /* Scroll area: 10% top/bottom padding, themed scrollbar; no flex-1 so modal can shrink */
  .modal__body {
    @apply overflow-y-auto px-6 py-[10%];
  }

  /* Custom scrollbar (neutral — works in light & dark) */
  .modal__body::-webkit-scrollbar {
    width: 8px;
  }
  .modal__body::-webkit-scrollbar-thumb {
    background-color: rgb(163 163 163 / 0.5); /* neutral-400 with transparency */
    border-radius: 4px;
  }
  .modal__body::-webkit-scrollbar-thumb:hover {
    background-color: rgb(115 115 115 / 0.7); /* neutral-500 hover */
  }
  .modal__body::-webkit-scrollbar-track {
    background: transparent;
  }

  .modal__close {
    @apply !rounded-full !px-2.5;
  }
</style>

<script is:inline>
  // Back-button close + scroll lock, without changing Foxi’s overlay logic
  document.addEventListener('astro:page-load', () => {
    const modals = document.querySelectorAll('.modal');

    modals.forEach((modal) => {
      let pushedForThisOpen = false;

      const onClassChange = () => {
        const isOpen = modal.classList.contains('open');

        // Body scroll lock
        document.body.style.overflow = isOpen ? 'hidden' : '';

        // History push on open (once)
        if (isOpen && !pushedForThisOpen) {
          history.pushState({ modalOpen: true }, '');
          pushedForThisOpen = true;
        }

        // If user closes the modal (via close button or clicking overlay in LocalScripts),
        // and we had pushed a state for it, pop that state so Back behaves normally.
        if (!isOpen && pushedForThisOpen && history.state && history.state.modalOpen) {
          pushedForThisOpen = false;
          // Pop only our dummy state; stays on the same page
          history.back();
        }
      };

      // Observe changes to the modal's class attribute (open/close).
      const observer = new MutationObserver(onClassChange);
      observer.observe(modal, { attributes: true, attributeFilter: ['class'] });

      // Close modal on browser Back
      window.addEventListener('popstate', () => {
        if (modal.classList.contains('open')) {
          modal.classList.remove('open');
        }
      });
    });
  });
</script>